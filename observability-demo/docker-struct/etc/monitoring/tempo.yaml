# Tempo 서버 기본 설정
server:
  http_listen_port: 3200 # Grafana와 API 통신을 위한 HTTP 포트

# 분산 추적 데이터 수신기 설정
distributor:
  receivers:
    # OpenTelemetry Protocol (OTLP) - 주요 수신 프로토콜
    otlp:
      protocols:
        http:
          endpoint: 0.0.0.0:4318 # OTLP HTTP 수신 엔드포인트
        grpc:
          endpoint: 0.0.0.0:4317 # OTLP gRPC 수신 엔드포인트

# 트레이스 데이터 수집 및 저장 관리
ingester:
  max_block_duration: 5m # 5분마다 메모리의 데이터를 디스크 블록으로 저장

# 데이터 압축 및 정리 관리
compactor:
  compaction:
    block_retention: 1h # 1시간 후 데이터 삭제, prd 에선 30d 로 설정

# 트레이스에서 메트릭 생성 및 처리 설정
metrics_generator:
  processor:
    local_blocks:
      filter_server_spans: false # 서버 스팬 필터링 비활성화
      flush_to_storage: true     # 로컬 스토리지로 플러시 활성화
    service_graphs:
      enable_virtual_node_label: true # https://grafana.com/docs/tempo/latest/configuration/#metrics-generator

  storage:
    path: /tmp/tempo/generator/wal  # 메트릭 생성기의 임시 WAL 저장소 경로
    remote_write:                   # Prometheus로 메트릭 원격 전송 설정
      - url: http://prometheus:9090/api/v1/write # Prometheus 원격 쓰기 URL
        send_exemplars: true                     # Exemplar 전송 활성화
  traces_storage:
    path: /tmp/tempo/generator/traces # 메트릭 생성을 위한 트레이스 임시 저장 경로

# 트레이스 데이터 저장 백엔드 설정
storage:
  trace:
    backend: local # 로컬 파일 시스템을 백엔드로 사용
    wal:
      path: /var/tempo/wal # Write-Ahead Log 저장 경로
    local:
      path: /var/tempo/blocks # 트레이스 블록 데이터 저장 경로

# 테넌트별 설정 오버라이드
overrides:
  defaults:
    metrics_generator:
      processors: [service-graphs, span-metrics, local-blocks] # 활성화할 메트릭 프로세서 목록
      generate_native_histograms: false # 네이티브 히스토그램 비활성화 (Prometheus 호환성을 위해)