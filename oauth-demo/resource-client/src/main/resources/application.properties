#spring:
#  security:
#    oauth2:
#      client:
#        registration:
#          spring:
#            client-id: "spring"
#            client-secret: "secret"
#            client-name: "Spring Security"
#            provider: "oauth-demo-provider"
#            scope: "openid, profile"
#            redirect-uri: "http://127.0.0.1:8080/login/oauth2/code/{registrationId}"
#            client-authentication-method: "client_secret_basic"
#            authorization-grant-type: "authorization_code"
#        provider:
#          oauth-demo-provider":
#            issuer-uri: "http://localhost:9090"
# server config
server.port=8080
spring.profiles.active=jwt
logging.level.root=debug
# datasource config
spring.datasource.url=jdbc:h2:mem:test;MODE=MYSQL;
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
#spring data jpa config
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#h2 console access
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
# 타 authorization server client id/secret
naver.oauth.client.id=TkI...
naver.oauth.client.secret=Pjz...
kakao.oauth.client.id=90f...
kakao.oauth.client.secret=L4a...
# oauth2-client-schema 생성을 위한 설정
# oauth2-client-schema 생성을 위한 설정, access token, refresh token 저장용
spring.sql.init.mode=always
spring.sql.init.schema-locations=classpath:org/springframework/security/oauth2/client/oauth2-client-schema.sql
spring.jwt.secret=rxmMdbRqs8qBHrGpsyIXwuv3k8L7OdFGeSzMRD9mCe9SU5wsSbFshBRETOSj4D3v